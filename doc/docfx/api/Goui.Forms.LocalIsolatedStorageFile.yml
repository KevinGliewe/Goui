### YamlMime:ManagedReference
items:
- uid: Goui.Forms.LocalIsolatedStorageFile
  commentId: T:Goui.Forms.LocalIsolatedStorageFile
  id: LocalIsolatedStorageFile
  parent: Goui.Forms
  children:
  - Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync(System.String)
  - Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync(System.String)
  - Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync(System.String)
  - Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync(System.String)
  - Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess)
  - Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  langs:
  - csharp
  - vb
  name: LocalIsolatedStorageFile
  nameWithType: LocalIsolatedStorageFile
  fullName: Goui.Forms.LocalIsolatedStorageFile
  type: Class
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: LocalIsolatedStorageFile
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 7
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: 'public class LocalIsolatedStorageFile : IIsolatedStorageFile'
    content.vb: >-
      Public Class LocalIsolatedStorageFile

          Implements IIsolatedStorageFile
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync(System.String)
  commentId: M:Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync(System.String)
  id: CreateDirectoryAsync(System.String)
  parent: Goui.Forms.LocalIsolatedStorageFile
  langs:
  - csharp
  - vb
  name: CreateDirectoryAsync(String)
  nameWithType: LocalIsolatedStorageFile.CreateDirectoryAsync(String)
  fullName: Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync(System.String)
  type: Method
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: CreateDirectoryAsync
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 9
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: public Task CreateDirectoryAsync(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function CreateDirectoryAsync(path As String) As Task
  overload: Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync(System.String)
  commentId: M:Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync(System.String)
  id: GetDirectoryExistsAsync(System.String)
  parent: Goui.Forms.LocalIsolatedStorageFile
  langs:
  - csharp
  - vb
  name: GetDirectoryExistsAsync(String)
  nameWithType: LocalIsolatedStorageFile.GetDirectoryExistsAsync(String)
  fullName: Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: GetDirectoryExistsAsync
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 14
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: public Task<bool> GetDirectoryExistsAsync(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function GetDirectoryExistsAsync(path As String) As Task(Of Boolean)
  overload: Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync(System.String)
  commentId: M:Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync(System.String)
  id: GetFileExistsAsync(System.String)
  parent: Goui.Forms.LocalIsolatedStorageFile
  langs:
  - csharp
  - vb
  name: GetFileExistsAsync(String)
  nameWithType: LocalIsolatedStorageFile.GetFileExistsAsync(String)
  fullName: Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: GetFileExistsAsync
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 19
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: public Task<bool> GetFileExistsAsync(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function GetFileExistsAsync(path As String) As Task(Of Boolean)
  overload: Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync(System.String)
  commentId: M:Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync(System.String)
  id: GetLastWriteTimeAsync(System.String)
  parent: Goui.Forms.LocalIsolatedStorageFile
  langs:
  - csharp
  - vb
  name: GetLastWriteTimeAsync(String)
  nameWithType: LocalIsolatedStorageFile.GetLastWriteTimeAsync(String)
  fullName: Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync(System.String)
  type: Method
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: GetLastWriteTimeAsync
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 24
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: public Task<DateTimeOffset> GetLastWriteTimeAsync(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.DateTimeOffset}
    content.vb: Public Function GetLastWriteTimeAsync(path As String) As Task(Of DateTimeOffset)
  overload: Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess)
  commentId: M:Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: Goui.Forms.LocalIsolatedStorageFile
  langs:
  - csharp
  - vb
  name: OpenFileAsync(String, FileMode, FileAccess)
  nameWithType: LocalIsolatedStorageFile.OpenFileAsync(String, FileMode, FileAccess)
  fullName: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String, System.IO.FileMode, System.IO.FileAccess)
  type: Method
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: OpenFileAsync
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 29
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: public Task<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function OpenFileAsync(path As String, mode As FileMode, access As FileAccess) As Task(Of Stream)
  overload: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  commentId: M:Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: OpenFileAsync(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: Goui.Forms.LocalIsolatedStorageFile
  langs:
  - csharp
  - vb
  name: OpenFileAsync(String, FileMode, FileAccess, FileShare)
  nameWithType: LocalIsolatedStorageFile.OpenFileAsync(String, FileMode, FileAccess, FileShare)
  fullName: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Method
  source:
    remote:
      path: Goui.Forms/LocalIsolatedStorageFile.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: OpenFileAsync
    path: ../../Goui.Forms/LocalIsolatedStorageFile.cs
    startLine: 34
  assemblies:
  - Goui.Forms
  namespace: Goui.Forms
  syntax:
    content: public Task<Stream> OpenFileAsync(string path, FileMode mode, FileAccess access, FileShare share)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function OpenFileAsync(path As String, mode As FileMode, access As FileAccess, share As FileShare) As Task(Of Stream)
  overload: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Goui.Forms
  commentId: N:Goui.Forms
  name: Goui.Forms
  nameWithType: Goui.Forms
  fullName: Goui.Forms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync*
  commentId: Overload:Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync
  name: CreateDirectoryAsync
  nameWithType: LocalIsolatedStorageFile.CreateDirectoryAsync
  fullName: Goui.Forms.LocalIsolatedStorageFile.CreateDirectoryAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync*
  commentId: Overload:Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync
  name: GetDirectoryExistsAsync
  nameWithType: LocalIsolatedStorageFile.GetDirectoryExistsAsync
  fullName: Goui.Forms.LocalIsolatedStorageFile.GetDirectoryExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync*
  commentId: Overload:Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync
  name: GetFileExistsAsync
  nameWithType: LocalIsolatedStorageFile.GetFileExistsAsync
  fullName: Goui.Forms.LocalIsolatedStorageFile.GetFileExistsAsync
- uid: Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync*
  commentId: Overload:Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync
  name: GetLastWriteTimeAsync
  nameWithType: LocalIsolatedStorageFile.GetLastWriteTimeAsync
  fullName: Goui.Forms.LocalIsolatedStorageFile.GetLastWriteTimeAsync
- uid: System.Threading.Tasks.Task{System.DateTimeOffset}
  commentId: T:System.Threading.Tasks.Task{System.DateTimeOffset}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DateTimeOffset>
  nameWithType: Task<DateTimeOffset>
  fullName: System.Threading.Tasks.Task<System.DateTimeOffset>
  nameWithType.vb: Task(Of DateTimeOffset)
  fullName.vb: System.Threading.Tasks.Task(Of System.DateTimeOffset)
  name.vb: Task(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync*
  commentId: Overload:Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync
  name: OpenFileAsync
  nameWithType: LocalIsolatedStorageFile.OpenFileAsync
  fullName: Goui.Forms.LocalIsolatedStorageFile.OpenFileAsync
- uid: System.IO.FileMode
  commentId: T:System.IO.FileMode
  parent: System.IO
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileAccess
  commentId: T:System.IO.FileAccess
  parent: System.IO
  isExternal: true
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.IO.FileShare
  commentId: T:System.IO.FileShare
  parent: System.IO
  isExternal: true
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
