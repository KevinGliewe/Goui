### YamlMime:ManagedReference
items:
- uid: Goui.EventTarget
  commentId: T:Goui.EventTarget
  id: EventTarget
  parent: Goui
  children:
  - Goui.EventTarget.#ctor(System.String)
  - Goui.EventTarget.AddEventListener(System.String,Goui.TargetEventHandler)
  - Goui.EventTarget.AddStateMessage(Goui.Message)
  - Goui.EventTarget.Call(System.String,System.Object[])
  - Goui.EventTarget.GetElementById(System.String)
  - Goui.EventTarget.Id
  - Goui.EventTarget.IdPrefix
  - Goui.EventTarget.MessageSent
  - Goui.EventTarget.OnPropertyChanged(System.String)
  - Goui.EventTarget.PropertyChanged
  - Goui.EventTarget.Receive(Goui.Message)
  - Goui.EventTarget.RemoveEventListener(System.String,Goui.TargetEventHandler)
  - Goui.EventTarget.SaveStateMessageIfNeeded(Goui.Message)
  - Goui.EventTarget.Send(Goui.Message)
  - Goui.EventTarget.SendSet(System.String,System.Object)
  - Goui.EventTarget.SetProperty``1(``0@,``0,System.String,System.String)
  - Goui.EventTarget.StateMessages
  - Goui.EventTarget.TagName
  - Goui.EventTarget.ToString
  - Goui.EventTarget.TriggerEvent(System.String)
  - Goui.EventTarget.TriggerEventFromMessage(Goui.Message)
  - Goui.EventTarget.UpdateStateMessages(System.Action{System.Collections.Generic.List{Goui.Message}})
  langs:
  - csharp
  - vb
  name: EventTarget
  nameWithType: EventTarget
  fullName: Goui.EventTarget
  type: Class
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: EventTarget
    path: ../../Goui/EventTarget.cs
    startLine: 8
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: >-
      [JsonConverter(typeof(EventTargetJsonConverter))]

      public abstract class EventTarget : INotifyPropertyChanged
    content.vb: >-
      <JsonConverter(GetType(EventTargetJsonConverter))>

      Public MustInherit Class EventTarget

          Implements INotifyPropertyChanged
  inheritance:
  - System.Object
  derivedClasses:
  - Goui.Document
  - Goui.Html.CanvasRenderingContext2D
  - Goui.Node
  - Goui.Window
  implements:
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Goui.EventTarget.Id
  commentId: P:Goui.EventTarget.Id
  id: Id
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: EventTarget.Id
  fullName: Goui.EventTarget.Id
  type: Property
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: Id
    path: ../../Goui/EventTarget.cs
    startLine: 16
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public string Id { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: Goui.EventTarget.Id*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Goui.EventTarget.TagName
  commentId: P:Goui.EventTarget.TagName
  id: TagName
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: TagName
  nameWithType: EventTarget.TagName
  fullName: Goui.EventTarget.TagName
  type: Property
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: TagName
    path: ../../Goui/EventTarget.cs
    startLine: 18
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public string TagName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TagName As String
  overload: Goui.EventTarget.TagName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Goui.EventTarget.PropertyChanged
  commentId: E:Goui.EventTarget.PropertyChanged
  id: PropertyChanged
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: EventTarget.PropertyChanged
  fullName: Goui.EventTarget.PropertyChanged
  type: Event
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: PropertyChanged
    path: ../../Goui/EventTarget.cs
    startLine: 20
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.EventTarget.MessageSent
  commentId: E:Goui.EventTarget.MessageSent
  id: MessageSent
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: MessageSent
  nameWithType: EventTarget.MessageSent
  fullName: Goui.EventTarget.MessageSent
  type: Event
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: MessageSent
    path: ../../Goui/EventTarget.cs
    startLine: 22
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public event Action<Message> MessageSent
    return:
      type: System.Action{Goui.Message}
    content.vb: Public Event MessageSent As Action(Of Message)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.EventTarget.StateMessages
  commentId: P:Goui.EventTarget.StateMessages
  id: StateMessages
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: StateMessages
  nameWithType: EventTarget.StateMessages
  fullName: Goui.EventTarget.StateMessages
  type: Property
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: StateMessages
    path: ../../Goui/EventTarget.cs
    startLine: 24
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public IReadOnlyList<Message> StateMessages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Goui.Message}
    content.vb: Public ReadOnly Property StateMessages As IReadOnlyList(Of Message)
  overload: Goui.EventTarget.StateMessages*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Goui.EventTarget.#ctor(System.String)
  commentId: M:Goui.EventTarget.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: EventTarget(String)
  nameWithType: EventTarget.EventTarget(String)
  fullName: Goui.EventTarget.EventTarget(System.String)
  type: Constructor
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: .ctor
    path: ../../Goui/EventTarget.cs
    startLine: 32
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected EventTarget(string tagName)
    parameters:
    - id: tagName
      type: System.String
    content.vb: Protected Sub New(tagName As String)
  overload: Goui.EventTarget.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Goui.EventTarget.ToString
  commentId: M:Goui.EventTarget.ToString
  id: ToString
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: EventTarget.ToString()
  fullName: Goui.EventTarget.ToString()
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: ToString
    path: ../../Goui/EventTarget.cs
    startLine: 43
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Goui.EventTarget.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Goui.EventTarget.GetElementById(System.String)
  commentId: M:Goui.EventTarget.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: GetElementById(String)
  nameWithType: EventTarget.GetElementById(String)
  fullName: Goui.EventTarget.GetElementById(System.String)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: GetElementById
    path: ../../Goui/EventTarget.cs
    startLine: 45
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public virtual EventTarget GetElementById(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: Goui.EventTarget
    content.vb: Public Overridable Function GetElementById(id As String) As EventTarget
  overload: Goui.EventTarget.GetElementById*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Goui.EventTarget.AddEventListener(System.String,Goui.TargetEventHandler)
  commentId: M:Goui.EventTarget.AddEventListener(System.String,Goui.TargetEventHandler)
  id: AddEventListener(System.String,Goui.TargetEventHandler)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: AddEventListener(String, TargetEventHandler)
  nameWithType: EventTarget.AddEventListener(String, TargetEventHandler)
  fullName: Goui.EventTarget.AddEventListener(System.String, Goui.TargetEventHandler)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: AddEventListener
    path: ../../Goui/EventTarget.cs
    startLine: 51
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public void AddEventListener(string eventType, TargetEventHandler handler)
    parameters:
    - id: eventType
      type: System.String
    - id: handler
      type: Goui.TargetEventHandler
    content.vb: Public Sub AddEventListener(eventType As String, handler As TargetEventHandler)
  overload: Goui.EventTarget.AddEventListener*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.EventTarget.RemoveEventListener(System.String,Goui.TargetEventHandler)
  commentId: M:Goui.EventTarget.RemoveEventListener(System.String,Goui.TargetEventHandler)
  id: RemoveEventListener(System.String,Goui.TargetEventHandler)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: RemoveEventListener(String, TargetEventHandler)
  nameWithType: EventTarget.RemoveEventListener(String, TargetEventHandler)
  fullName: Goui.EventTarget.RemoveEventListener(System.String, Goui.TargetEventHandler)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: RemoveEventListener
    path: ../../Goui/EventTarget.cs
    startLine: 76
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public void RemoveEventListener(string eventType, TargetEventHandler handler)
    parameters:
    - id: eventType
      type: System.String
    - id: handler
      type: Goui.TargetEventHandler
    content.vb: Public Sub RemoveEventListener(eventType As String, handler As TargetEventHandler)
  overload: Goui.EventTarget.RemoveEventListener*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.EventTarget.SetProperty``1(``0@,``0,System.String,System.String)
  commentId: M:Goui.EventTarget.SetProperty``1(``0@,``0,System.String,System.String)
  id: SetProperty``1(``0@,``0,System.String,System.String)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: SetProperty<T>(ref T, T, String, String)
  nameWithType: EventTarget.SetProperty<T>(ref T, T, String, String)
  fullName: Goui.EventTarget.SetProperty<T>(ref T, T, System.String, System.String)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: SetProperty
    path: ../../Goui/EventTarget.cs
    startLine: 89
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected bool SetProperty<T>(ref T backingStore, T newValue, string jsPropertyName, string propertyName = "")
    parameters:
    - id: backingStore
      type: '{T}'
    - id: newValue
      type: '{T}'
    - id: jsPropertyName
      type: System.String
    - id: propertyName
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Protected Function SetProperty(Of T)(ByRef backingStore As T, newValue As T, jsPropertyName As String, propertyName As String = "") As Boolean
  overload: Goui.EventTarget.SetProperty*
  nameWithType.vb: EventTarget.SetProperty(Of T)(ByRef T, T, String, String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Goui.EventTarget.SetProperty(Of T)(ByRef T, T, System.String, System.String)
  name.vb: SetProperty(Of T)(ByRef T, T, String, String)
- uid: Goui.EventTarget.OnPropertyChanged(System.String)
  commentId: M:Goui.EventTarget.OnPropertyChanged(System.String)
  id: OnPropertyChanged(System.String)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(String)
  nameWithType: EventTarget.OnPropertyChanged(String)
  fullName: Goui.EventTarget.OnPropertyChanged(System.String)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: OnPropertyChanged
    path: ../../Goui/EventTarget.cs
    startLine: 99
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected virtual void OnPropertyChanged(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
    content.vb: Protected Overridable Sub OnPropertyChanged(propertyName As String)
  overload: Goui.EventTarget.OnPropertyChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Goui.EventTarget.IdPrefix
  commentId: F:Goui.EventTarget.IdPrefix
  id: IdPrefix
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: IdPrefix
  nameWithType: EventTarget.IdPrefix
  fullName: Goui.EventTarget.IdPrefix
  type: Field
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: IdPrefix
    path: ../../Goui/EventTarget.cs
    startLine: 104
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public const char IdPrefix = '⦙'
    return:
      type: System.Char
    content.vb: Public Const IdPrefix As Char = "⦙"c
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Goui.EventTarget.Send(Goui.Message)
  commentId: M:Goui.EventTarget.Send(Goui.Message)
  id: Send(Goui.Message)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: Send(Message)
  nameWithType: EventTarget.Send(Message)
  fullName: Goui.EventTarget.Send(Goui.Message)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: Send
    path: ../../Goui/EventTarget.cs
    startLine: 113
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public void Send(Message message)
    parameters:
    - id: message
      type: Goui.Message
    content.vb: Public Sub Send(message As Message)
  overload: Goui.EventTarget.Send*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.EventTarget.Call(System.String,System.Object[])
  commentId: M:Goui.EventTarget.Call(System.String,System.Object[])
  id: Call(System.String,System.Object[])
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: Call(String, Object[])
  nameWithType: EventTarget.Call(String, Object[])
  fullName: Goui.EventTarget.Call(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: Call
    path: ../../Goui/EventTarget.cs
    startLine: 122
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public void Call(string methodName, params object[] args)
    parameters:
    - id: methodName
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub Call(methodName As String, ParamArray args As Object())
  overload: Goui.EventTarget.Call*
  nameWithType.vb: EventTarget.Call(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Goui.EventTarget.Call(System.String, System.Object())
  name.vb: Call(String, Object())
- uid: Goui.EventTarget.SendSet(System.String,System.Object)
  commentId: M:Goui.EventTarget.SendSet(System.String,System.Object)
  id: SendSet(System.String,System.Object)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: SendSet(String, Object)
  nameWithType: EventTarget.SendSet(String, Object)
  fullName: Goui.EventTarget.SendSet(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: SendSet
    path: ../../Goui/EventTarget.cs
    startLine: 127
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected void SendSet(string jsPropertyName, object value)
    parameters:
    - id: jsPropertyName
      type: System.String
    - id: value
      type: System.Object
    content.vb: Protected Sub SendSet(jsPropertyName As String, value As Object)
  overload: Goui.EventTarget.SendSet*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Goui.EventTarget.Receive(Goui.Message)
  commentId: M:Goui.EventTarget.Receive(Goui.Message)
  id: Receive(Goui.Message)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: Receive(Message)
  nameWithType: EventTarget.Receive(Message)
  fullName: Goui.EventTarget.Receive(Goui.Message)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: Receive
    path: ../../Goui/EventTarget.cs
    startLine: 137
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: public void Receive(Message message)
    parameters:
    - id: message
      type: Goui.Message
    content.vb: Public Sub Receive(message As Message)
  overload: Goui.EventTarget.Receive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Goui.EventTarget.AddStateMessage(Goui.Message)
  commentId: M:Goui.EventTarget.AddStateMessage(Goui.Message)
  id: AddStateMessage(Goui.Message)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: AddStateMessage(Message)
  nameWithType: EventTarget.AddStateMessage(Message)
  fullName: Goui.EventTarget.AddStateMessage(Goui.Message)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: AddStateMessage
    path: ../../Goui/EventTarget.cs
    startLine: 145
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected void AddStateMessage(Message message)
    parameters:
    - id: message
      type: Goui.Message
    content.vb: Protected Sub AddStateMessage(message As Message)
  overload: Goui.EventTarget.AddStateMessage*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Goui.EventTarget.UpdateStateMessages(System.Action{System.Collections.Generic.List{Goui.Message}})
  commentId: M:Goui.EventTarget.UpdateStateMessages(System.Action{System.Collections.Generic.List{Goui.Message}})
  id: UpdateStateMessages(System.Action{System.Collections.Generic.List{Goui.Message}})
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: UpdateStateMessages(Action<List<Message>>)
  nameWithType: EventTarget.UpdateStateMessages(Action<List<Message>>)
  fullName: Goui.EventTarget.UpdateStateMessages(System.Action<System.Collections.Generic.List<Goui.Message>>)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: UpdateStateMessages
    path: ../../Goui/EventTarget.cs
    startLine: 150
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected void UpdateStateMessages(Action<List<Message>> updater)
    parameters:
    - id: updater
      type: System.Action{System.Collections.Generic.List{Goui.Message}}
    content.vb: Protected Sub UpdateStateMessages(updater As Action(Of List(Of Message)))
  overload: Goui.EventTarget.UpdateStateMessages*
  nameWithType.vb: EventTarget.UpdateStateMessages(Action(Of List(Of Message)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Goui.EventTarget.UpdateStateMessages(System.Action(Of System.Collections.Generic.List(Of Goui.Message)))
  name.vb: UpdateStateMessages(Action(Of List(Of Message)))
- uid: Goui.EventTarget.SaveStateMessageIfNeeded(Goui.Message)
  commentId: M:Goui.EventTarget.SaveStateMessageIfNeeded(Goui.Message)
  id: SaveStateMessageIfNeeded(Goui.Message)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: SaveStateMessageIfNeeded(Message)
  nameWithType: EventTarget.SaveStateMessageIfNeeded(Message)
  fullName: Goui.EventTarget.SaveStateMessageIfNeeded(Goui.Message)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: SaveStateMessageIfNeeded
    path: ../../Goui/EventTarget.cs
    startLine: 155
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected virtual bool SaveStateMessageIfNeeded(Message message)
    parameters:
    - id: message
      type: Goui.Message
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function SaveStateMessageIfNeeded(message As Message) As Boolean
  overload: Goui.EventTarget.SaveStateMessageIfNeeded*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Goui.EventTarget.TriggerEvent(System.String)
  commentId: M:Goui.EventTarget.TriggerEvent(System.String)
  id: TriggerEvent(System.String)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: TriggerEvent(String)
  nameWithType: EventTarget.TriggerEvent(String)
  fullName: Goui.EventTarget.TriggerEvent(System.String)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: TriggerEvent
    path: ../../Goui/EventTarget.cs
    startLine: 189
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected virtual bool TriggerEvent(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function TriggerEvent(name As String) As Boolean
  overload: Goui.EventTarget.TriggerEvent*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Goui.EventTarget.TriggerEventFromMessage(Goui.Message)
  commentId: M:Goui.EventTarget.TriggerEventFromMessage(Goui.Message)
  id: TriggerEventFromMessage(Goui.Message)
  parent: Goui.EventTarget
  langs:
  - csharp
  - vb
  name: TriggerEventFromMessage(Message)
  nameWithType: EventTarget.TriggerEventFromMessage(Message)
  fullName: Goui.EventTarget.TriggerEventFromMessage(Goui.Message)
  type: Method
  source:
    remote:
      path: Goui/EventTarget.cs
      branch: master
      repo: https://github.com/KevinGliewe/Goui.git
    id: TriggerEventFromMessage
    path: ../../Goui/EventTarget.cs
    startLine: 207
  assemblies:
  - Goui
  namespace: Goui
  syntax:
    content: protected virtual bool TriggerEventFromMessage(Message message)
    parameters:
    - id: message
      type: Goui.Message
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function TriggerEventFromMessage(message As Message) As Boolean
  overload: Goui.EventTarget.TriggerEventFromMessage*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Goui
  commentId: N:Goui
  name: Goui
  nameWithType: Goui
  fullName: Goui
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: Goui.EventTarget.Id*
  commentId: Overload:Goui.EventTarget.Id
  name: Id
  nameWithType: EventTarget.Id
  fullName: Goui.EventTarget.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Goui.EventTarget.TagName*
  commentId: Overload:Goui.EventTarget.TagName
  name: TagName
  nameWithType: EventTarget.TagName
  fullName: Goui.EventTarget.TagName
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: System.Action{Goui.Message}
  commentId: T:System.Action{Goui.Message}
  parent: System
  definition: System.Action`1
  name: Action<Message>
  nameWithType: Action<Message>
  fullName: System.Action<Goui.Message>
  nameWithType.vb: Action(Of Message)
  fullName.vb: System.Action(Of Goui.Message)
  name.vb: Action(Of Message)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Goui.Message
    name: Message
    nameWithType: Message
    fullName: Goui.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Goui.Message
    name: Message
    nameWithType: Message
    fullName: Goui.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Goui.EventTarget.StateMessages*
  commentId: Overload:Goui.EventTarget.StateMessages
  name: StateMessages
  nameWithType: EventTarget.StateMessages
  fullName: Goui.EventTarget.StateMessages
- uid: System.Collections.Generic.IReadOnlyList{Goui.Message}
  commentId: T:System.Collections.Generic.IReadOnlyList{Goui.Message}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Message>
  nameWithType: IReadOnlyList<Message>
  fullName: System.Collections.Generic.IReadOnlyList<Goui.Message>
  nameWithType.vb: IReadOnlyList(Of Message)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Goui.Message)
  name.vb: IReadOnlyList(Of Message)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Goui.Message
    name: Message
    nameWithType: Message
    fullName: Goui.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Goui.Message
    name: Message
    nameWithType: Message
    fullName: Goui.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Goui.EventTarget.#ctor*
  commentId: Overload:Goui.EventTarget.#ctor
  name: EventTarget
  nameWithType: EventTarget.EventTarget
  fullName: Goui.EventTarget.EventTarget
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Goui.EventTarget.ToString*
  commentId: Overload:Goui.EventTarget.ToString
  name: ToString
  nameWithType: EventTarget.ToString
  fullName: Goui.EventTarget.ToString
- uid: Goui.EventTarget.GetElementById*
  commentId: Overload:Goui.EventTarget.GetElementById
  name: GetElementById
  nameWithType: EventTarget.GetElementById
  fullName: Goui.EventTarget.GetElementById
- uid: Goui.EventTarget
  commentId: T:Goui.EventTarget
  parent: Goui
  name: EventTarget
  nameWithType: EventTarget
  fullName: Goui.EventTarget
- uid: Goui.EventTarget.AddEventListener*
  commentId: Overload:Goui.EventTarget.AddEventListener
  name: AddEventListener
  nameWithType: EventTarget.AddEventListener
  fullName: Goui.EventTarget.AddEventListener
- uid: Goui.TargetEventHandler
  commentId: T:Goui.TargetEventHandler
  parent: Goui
  name: TargetEventHandler
  nameWithType: TargetEventHandler
  fullName: Goui.TargetEventHandler
- uid: Goui.EventTarget.RemoveEventListener*
  commentId: Overload:Goui.EventTarget.RemoveEventListener
  name: RemoveEventListener
  nameWithType: EventTarget.RemoveEventListener
  fullName: Goui.EventTarget.RemoveEventListener
- uid: Goui.EventTarget.SetProperty*
  commentId: Overload:Goui.EventTarget.SetProperty
  name: SetProperty
  nameWithType: EventTarget.SetProperty
  fullName: Goui.EventTarget.SetProperty
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Goui.EventTarget.OnPropertyChanged*
  commentId: Overload:Goui.EventTarget.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: EventTarget.OnPropertyChanged
  fullName: Goui.EventTarget.OnPropertyChanged
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Goui.EventTarget.Send*
  commentId: Overload:Goui.EventTarget.Send
  name: Send
  nameWithType: EventTarget.Send
  fullName: Goui.EventTarget.Send
- uid: Goui.Message
  commentId: T:Goui.Message
  parent: Goui
  name: Message
  nameWithType: Message
  fullName: Goui.Message
- uid: Goui.EventTarget.Call*
  commentId: Overload:Goui.EventTarget.Call
  name: Call
  nameWithType: EventTarget.Call
  fullName: Goui.EventTarget.Call
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Goui.EventTarget.SendSet*
  commentId: Overload:Goui.EventTarget.SendSet
  name: SendSet
  nameWithType: EventTarget.SendSet
  fullName: Goui.EventTarget.SendSet
- uid: Goui.EventTarget.Receive*
  commentId: Overload:Goui.EventTarget.Receive
  name: Receive
  nameWithType: EventTarget.Receive
  fullName: Goui.EventTarget.Receive
- uid: Goui.EventTarget.AddStateMessage*
  commentId: Overload:Goui.EventTarget.AddStateMessage
  name: AddStateMessage
  nameWithType: EventTarget.AddStateMessage
  fullName: Goui.EventTarget.AddStateMessage
- uid: Goui.EventTarget.UpdateStateMessages*
  commentId: Overload:Goui.EventTarget.UpdateStateMessages
  name: UpdateStateMessages
  nameWithType: EventTarget.UpdateStateMessages
  fullName: Goui.EventTarget.UpdateStateMessages
- uid: System.Action{System.Collections.Generic.List{Goui.Message}}
  commentId: T:System.Action{System.Collections.Generic.List{Goui.Message}}
  parent: System
  definition: System.Action`1
  name: Action<List<Message>>
  nameWithType: Action<List<Message>>
  fullName: System.Action<System.Collections.Generic.List<Goui.Message>>
  nameWithType.vb: Action(Of List(Of Message))
  fullName.vb: System.Action(Of System.Collections.Generic.List(Of Goui.Message))
  name.vb: Action(Of List(Of Message))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Goui.Message
    name: Message
    nameWithType: Message
    fullName: Goui.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Goui.Message
    name: Message
    nameWithType: Message
    fullName: Goui.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Goui.EventTarget.SaveStateMessageIfNeeded*
  commentId: Overload:Goui.EventTarget.SaveStateMessageIfNeeded
  name: SaveStateMessageIfNeeded
  nameWithType: EventTarget.SaveStateMessageIfNeeded
  fullName: Goui.EventTarget.SaveStateMessageIfNeeded
- uid: Goui.EventTarget.TriggerEvent*
  commentId: Overload:Goui.EventTarget.TriggerEvent
  name: TriggerEvent
  nameWithType: EventTarget.TriggerEvent
  fullName: Goui.EventTarget.TriggerEvent
- uid: Goui.EventTarget.TriggerEventFromMessage*
  commentId: Overload:Goui.EventTarget.TriggerEventFromMessage
  name: TriggerEventFromMessage
  nameWithType: EventTarget.TriggerEventFromMessage
  fullName: Goui.EventTarget.TriggerEventFromMessage
